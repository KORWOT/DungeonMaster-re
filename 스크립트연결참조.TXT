# 스크립트 연결 참조 (전체)
# 최종 업데이트: 2025-08-02
# 이 문서는 프로젝트에 포함된 모든 주요 스크립트의 역할과 상호 연결 관계를 구체적으로 기술합니다.

---
## 1. 관리자 시스템 (Managers)
*게임의 핵심 시스템을 총괄하고 관리하는 싱글톤 및 일반 클래스들입니다.*

### `Managers.GameFlowManager`
- **역할**: 게임의 전체적인 상태(Lobby, Placement, Combat, Result)를 관리하는 최고 관리자.
- **위치**: `Assets/Scripts/Managers/GameFlowManager.cs`
- **참조하는 스크립트**:
    - `DungeonGrid`, `MonsterPlacementManager`, `CharacterFactory`, `EnemySpawner` (인스펙터에서 할당)
    - `RewardTable` (`Resources.Load`를 통해 동적으로 로드)
    - `RewardManager`, `SaveLoadManager` (`new` 키워드로 직접 생성)
    - `GameLogger` (로그 기록)
- **참조되는 스크립트**: (없음 - 싱글톤 Instance를 통해 외부에서 접근)

### `Managers.RewardManager`
- **역할**: 전투 종료 후 보상을 계산하고 지급하는 로직을 담당.
- **위치**: `Assets/Scripts/Managers/RewardManager.cs`
- **참조하는 스크립트**:
    - `RewardTable` (보상 규칙 데이터)
    - `PlayerData` (보상을 지급할 대상)
    - `GameLogger` (로그 기록)
- **참조되는 스크립트**:
    - `GameFlowManager` (생성 및 호출)

### `Managers.SaveLoadManager`
- **역할**: `PlayerData`를 JSON으로 직렬화하고, 암호화하여 파일에 저장/로드.
- **위치**: `Assets/Scripts/Managers/SaveLoadManager.cs`
- **참조하는 스크립트**:
    - `PlayerData` (저장/로드 대상)
    - `GameLogger` (로그 기록)
- **참조되는 스크립트**:
    - `GameFlowManager` (생성)

---
## 2. 핵심 시스템 (Core)
*게임의 가장 기본적인 기능(시간, 틱, 로그)을 제공하는 시스템입니다.*

### `Core.Ticks.TickManager`
- **역할**: 게임의 시간 단위인 '틱'을 일정한 간격으로 발생시키는 중앙 시계.
- **위치**: `Assets/Scripts/Core/TickManager.cs`
- **참조하는 스크립트**:
    - `ITickListener` (등록된 모든 리스너에게 틱 이벤트 전파)
    - `GameLogger` (로그 기록)
- **참조되는 스크립트**: `ITickListener`를 구현하는 모든 클래스.

### `Core.Ticks.ITickListener`
- **역할**: `TickManager`로부터 틱 이벤트를 수신하기 위한 인터페이스.
- **위치**: `Assets/Scripts/Core/ITickListener.cs`
- **참조되는 스크립트**: `TickManager`.

### `Core.Time.GameTimeManager`
- **역할**: 게임의 실제 시간(배속, 일시정지 포함)을 관리. `Time.deltaTime`의 대안.
- **위치**: `Assets/Scripts/Core/Time/GameTimeManager.cs`
- **참조되는 스크립트**: `BuffController` 등 게임 시간에 따라 동작해야 하는 모든 스크립트.

### `Core.Logging.*`
- **역할**: `GameLogger`를 통해 디버깅 및 보안 로그를 기록하는 시스템.
- **위치**: `Assets/Scripts/Core/Logging/`
- **참조되는 스크립트**: 게임 내 거의 모든 스크립트.

---
## 3. 전투 및 캐릭터 시스템 (Combat & Character)

### `CharacterStats`
- **역할**: 캐릭터의 모든 스탯(기본 스탯 + 모디파이어)을 실시간으로 계산.
- **위치**: `Assets/Scripts/CharacterStats.cs`
- **참조하는 스크립트**:
    - `StatModifier` (스탯 변경 데이터)
    - `StatType`, `StatModType` (열거형)
    - `GameLogger` (로그 기록)
- **참조되는 스크립트**:
    - `BuffController` (모디파이어 추가/제거)
    - `CharacterFactory` (초기 스탯 설정)

### `Combat.Buffs.BuffController`
- **역할**: 캐릭터에 적용된 버프/디버프의 생명주기를 관리.
- **위치**: `Assets/Scripts/Combat/BuffController.cs`
- **참조하는 스크립트**:
    - `ActiveBuff` (내부 클래스, 실제 버프 인스턴스)
    - `Buff` (버프 데이터 원형)
    - `CharacterStats` (스탯 모디파이어 적용 대상)
    - `GameTimeManager` (버프 시간 갱신)
- **참조되는 스크립트**: `CharacterFactory` (캐릭터 생성 시 함께 부착).

### `Combat.DemonLordSkillManager`
- **역할**: 마왕의 액티브 스킬 사용 및 쿨다운을 관리.
- **위치**: `Assets/Scripts/Combat/DemonLordSkillManager.cs`
- **참조하는 스크립트**:
    - `ActiveSkillHandler` (내부 클래스, 실제 스킬 인스턴스)
    - `UniqueSkillData` (스킬 데이터)

### `Combat.EnemySpawner`
- **역할**: `WaveData`를 기반으로 적 유닛을 생성하고 던전 입구에 배치.
- **위치**: `Assets/Scripts/Combat/EnemySpawner.cs`
- **참조하는 스크립트**:
    - `WaveData` (웨이브 구성 정보)
    - `DungeonGrid` (스폰 위치 정보)
- **참조되는 스크립트**: `GameFlowManager`.

### `Combat.GridMovementController`
- **역할**: 그리드 환경에서 유닛의 이동을 담당.
- **위치**: `Assets/Scripts/Combat/GridMovementController.cs`

---
## 4. 데이터 및 설정 (Data & Settings)
*게임의 영구/임시 데이터 구조와 `ScriptableObject` 기반의 설정 파일들입니다.*

### `Data.PlayerData`
- **역할**: 플레이어의 영구 데이터를 정의하는 최상위 클래스.
- **위치**: `Assets/Scripts/Data/PlayerData.cs`
- **참조되는 스크립트**: `SaveLoadManager`, `RewardManager`, `GameFlowManager`.

### `Data.BaseMonsterCard` & `Data.Structs.*`
- **역할**: 몬스터 카드의 영구 데이터와 그 하위 데이터(성장률, 스킬 등)를 정의.
- **위치**: `Assets/Scripts/Data/BaseMonsterCard.cs`, `Assets/Scripts/Data/Structs/`
- **참조되는 스크립트**: `PlayerData`, `MonsterPlacementManager`, `CharacterFactory`.

### `Settings.*`
- **역할**: `CardBalanceSettings`를 중심으로, 게임의 모든 밸런스(속성, 방어구, 등급별 스탯 등)를 정의하는 `ScriptableObject` 에셋들.
- **위치**: `Assets/Settings/`
- **참조되는 스크립트**: `CharacterFactory`, 각종 `Calculator` 클래스들.

### `Data.Enums.*`
- **역할**: 게임 전반에서 사용되는 모든 열거형(`StatType`, `CardGrade` 등)을 정의.
- **위치**: `Assets/Scripts/Data/Enums/`
- **참조되는 스크립트**: 게임 내 다수의 스크립트.

---
## 5. 던전 및 공장 (Dungeon & Factories)

### `Dungeon.DungeonGrid`
- **역할**: 던전의 3x3 그리드 구조와 상태를 관리.
- **위치**: `Assets/Scripts/Dungeon/DungeonGrid.cs`
- **참조되는 스크립트**: `GameFlowManager`, `MonsterPlacementManager`, `EnemySpawner`.

### `Dungeon.MonsterPlacementManager`
- **역할**: 전투 시작 전, 몬스터를 던전 그리드에 배치하는 과정을 관리.
- **위치**: `Assets/Scripts/Dungeon/MonsterPlacementManager.cs`
- **참조하는 스크립트**:
    - `DungeonGrid` (배치 가능 위치 확인)
    - `BaseMonsterCard` (배치할 몬스터 데이터)
- **참조되는 스크립트**: `GameFlowManager`.

### `Factories.CharacterFactory`
- **역할**: `BaseMonsterCard`와 `CardBalanceSettings`를 기반으로 실제 인게임 캐릭터 `GameObject`를 생성하고 `CharacterStats` 등의 컴포넌트를 초기화.
- **위치**: `Assets/Scripts/Factories/CharacterFactory.cs`
- **참조하는 스크립트**:
    - `BaseMonsterCard` (캐릭터 데이터 원본)
    - `CardBalanceSettings` (등급별 기본 스탯 등 밸런스 데이터)
    - `CharacterStats` (생성된 캐릭터에 부착 및 초기화)
- **참조되는 스크립트**: `GameFlowManager`.
