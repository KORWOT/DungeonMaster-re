# 스크립트 연결 참조

## 1. 데이터 구조 (Data)
이 섹션은 게임의 핵심 데이터를 정의하는 클래스, 구조체, 열거형을 다룹니다.

### `Data.PlayerData`
- **역할**: 플레이어의 모든 영구 데이터를 담는 최상위 클래스. 저장/로드의 대상.
- **주요 데이터**: 보유 재화, 소유한 카드 목록, 선택한 카드 목록 등.
- **위치**: `Assets/Scripts/Data/PlayerData.cs`

### `Data.BaseMonsterCard`
- **역할**: 몬스터 카드의 영구적인 데이터를 저장하는 클래스.
- **주요 데이터**: 고유 ID, 등급, 속성, 방어구 타입, 성장률, 특성, 스킬, 강화 레벨 등.
- **위치**: `Assets/Scripts/Data/BaseMonsterCard.cs`

### `Data.Structs.CardStructs`
- **역할**: `BaseMonsterCard` 등에서 사용하는 하위 데이터 묶음을 정의. GC 부담을 줄이기 위해 `struct`로 선언됨.
- **주요 구조체**: `GrowthRateData`, `CriticalData`, `UniqueSkillData`.
- **위치**: `Assets/Scripts/Data/CardStructs.cs`

### `Data.Enums`
- **역할**: 게임 전반에서 사용되는 핵심 열거형을 정의.
- **주요 열거형**: `CardGrade`, `ArmorType`, `ElementType`, `GrowthGrade`.
- **위치**: `Assets/Scripts/Data/Enums/`

## 2. 설정 (Settings)
이 섹션은 `ScriptableObject`를 기반으로, 기획자가 쉽게 수정할 수 있는 모든 게임 밸런스 및 규칙을 다룹니다.

### `Settings.CardBalanceSettings`
- **역할**: 모든 핵심 밸런스 설정 SO들을 중앙에서 참조하고 관리하는 허브.
- **참조 대상**: `ElementalSettings`, `ArmorSettings`, `GrowthRateSettings`, `CriticalSettings`, `CardGradeSettings`.
- **위치**: `Assets/Settings/CardBalanceSettings.cs`

### 개별 설정 파일
- **`ElementalSettings`**: 속성 상성 매트릭스 정의.
- **`ArmorSettings`**: 방어구 타입별 효과 정의.
- **`GrowthRateSettings`**: 성장률 등급(F~S)별 수치 범위 정의.
- **`CriticalSettings`**: 치명타 등급별 수치 범위 정의.
- **`CardGradeSettings`**: 카드 등급(C~UR)별 기본 스탯 정의.
- **`SkillSettings`**: 스킬 레벨별 효과 정의.
- **위치**: `Assets/Settings/`

## 3. 핵심 시스템 (Core Systems)
- **`Core.Time.GameTimeManager`**: 게임 시간(배속, 일시정지) 관리.
- **`Core.Ticks.TickManager`**: 고정 틱 단위 관리.
- **`Core.Logging`**: 디버그 및 보안 로그 관리.
- **위치**: `Assets/Scripts/Core/`

## 4. 캐릭터 및 전투 시스템
- **`Character.CharacterStats`**: 캐릭터의 '인게임' 스탯을 계산. 영구 스탯은 `PlayerData`로부터 초기화받음.
- **`Combat.Buffs.BuffController`**: 캐릭터의 '인게임' 버프를 관리.
- **`Combat.Buffs.Buff`**: 버프의 데이터 원형.
- **위치**: `Assets/Scripts/Character/`, `Assets/Scripts/Combat/`
