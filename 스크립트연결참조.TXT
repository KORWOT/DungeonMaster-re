# 스크립트 연결 참조

## 1. 핵심 시스템 (Core Systems)

### `Core.Time.GameTimeManager`
- **역할**: 게임의 전반적인 시간 흐름(배속, 일시정지)을 관리하는 싱글턴.
- **주요 특징**:
    - **씬 전환 시 유지**: `DontDestroyOnLoad`로 씬이 바뀌어도 인스턴스가 유지됨.
    - **`GameDeltaTime`**: 배속/일시정지가 적용된 `deltaTime`. 시간 기반 로직은 이 값을 사용해야 함.
- **연결**:
    - `Combat.Buffs.BuffController`가 버프의 지속시간을 계산하는 데 사용.
- **위치**: `Assets/Scripts/Core/Time/GameTimeManager.cs`

### `Core.Ticks.TickManager`
- **역할**: 게임의 고정된 틱(Tick) 단위를 관리하는 싱글턴.
- **주요 특징 및 최적화**:
    - **씬 전환 시 유지**, **안전한 리스너 순회**, **효율적인 리스너 제거**.
- **연결**:
    - `Core.Ticks.ITickListener`를 구현한 모든 객체가 틱 이벤트를 수신. (향후 `Combatant` 등)
- **위치**: `Assets/Scripts/Core/TickManager.cs`

### `Core.Logging` (로깅 시스템)
- **역할**: 게임 내 모든 로그를 목적(디버그, 보안)에 따라 분리하여 중앙에서 관리.
- **주요 특징**:
    - **컨텍스트 오브젝트 지원**: 로그 클릭 시 해당 오브젝트를 하이라이트하는 기능 추가.
- **`GameLogger` (일반 디버그 로거)**, **`AntiCheatLogger` (보안 로거)**
- **위치**: `Assets/Scripts/Core/Logging/`

## 2. 캐릭터 시스템 (Character Systems)

### `Character.CharacterStats`
- **역할**: 캐릭터의 모든 스탯을 종합하여 최종 값을 계산하고 제공.
- **주요 기능**:
    - `GetStat(StatType type)`, `AddModifier()`, `RemoveModifiersFromSource()`
- **최적화 및 정확성**:
    - **Enum 캐싱**, **LINQ 미사용**, **지연 계산**, **지연 정렬**, **반올림 처리**.
- **연결**:
    - `Combat.Buffs.BuffController`가 버프 효과를 적용/제거하기 위해 이 클래스와 상호작용.
- **위치**: `Assets/Scripts/CharacterStats.cs`

## 3. 전투 시스템 (Combat Systems)

### `Combat.Buffs.Buff` (ScriptableObject)
- **역할**: 버프/디버프의 데이터 원형(설계도)을 정의.
- **주요 데이터**: 이름, 설명, 지속시간, 스탯 모디파이어 목록 등.
- **사용법**: 유니티 에디터에서 에셋 파일로 다양한 버프를 생성하고 수정.
- **위치**: `Assets/Scripts/Combat/Buff.cs`

### `Combat.Buffs.BuffController`
- **역할**: 캐릭터에게 부착되어, 해당 캐릭터에게 적용된 모든 버프를 실시간으로 관리.
- **주요 기능**:
    - 버프 추가 및 제거.
    - `GameTimeManager`를 사용하여 각 버프의 남은 시간을 관리하고 만료 처리.
- **연결**:
    - `Buff` 에셋을 기반으로 `ActiveBuff` 인스턴스를 생성.
    - `CharacterStats`에 스탯 모디파이어를 추가/제거하여 실제 효과를 적용.
- **위치**: `Assets/Scripts/Combat/BuffController.cs`

## 4. 설정 (Settings)

### `Settings.GameSettings` (ScriptableObject)
- **역할**: 게임의 핵심 설정을 관리. (예: 레벨업 보너스)
- **사용법**: 기획자가 코드를 건드리지 않고 에셋 파일 수정을 통해 게임 밸런스를 조절.
- **위치**: `Assets/Settings/GameSettings.cs`
