# 스크립트 연결 참조 (전체)
# 최종 업데이트: 2025-08-03
# 이 문서는 프로젝트에 포함된 모든 주요 스크립트의 역할과 상호 연결 관계를 새로운 폴더 및 네임스페이스 구조에 따라 기술합니다.

---
## 1. 폴더 및 네임스페이스 규칙

- **최상위 폴더**: `Assets/1. Scripts`
- **네임스페이스**: `DungeonMaster.{카테고리}.{하위카테고리}` 형식을 따릅니다.
- **데이터 클래스**: ScriptableObject의 기반이 되는 C# 클래스는 `Data` 접미사를 가집니다 (예: `RewardTableData.cs`).

---
## 2. Core (DungeonMaster.Core)
*게임의 핵심 생명주기, 서비스 로케이터, 기본 인터페이스를 담당합니다.*

### `Core.Core`
- **역할**: 게임의 모든 핵심 서비스(매니저)를 인터페이스 기반으로 등록하고 제공하는 중앙 허브.
- **위치**: `Assets/1. Scripts/Core/Core.cs`
- **네임스페이스**: `DungeonMaster.Core`

### `Core.GameFlowManager`
- **역할**: 게임의 전체 상태(Lobby, Placement, Combat, Result)를 관리하고, 핵심 서비스들의 생명주기를 관리하는 최고 관리자.
- **위치**: `Assets/1. Scripts/Core/GameFlowManager.cs`
- **네임스페이스**: `DungeonMaster.Core`
- **참조**: `ISaveLoadManager`, `IRewardManager`, `IScoreManager`, `DungeonGrid`, `MonsterPlacementManager`, `EnemySpawner`, `RewardTableData` 등 다수

### `Core.SaveLoadManager`
- **역할**: `PlayerData`를 암호화하여 파일에 저장/로드.
- **위치**: `Assets/1. Scripts/Core/SaveLoadManager.cs`
- **네임스페이스**: `DungeonMaster.Core`
- **구현 인터페이스**: `ISaveLoadManager`

### `Core.Interfaces.*`
- **역할**: 서비스 로케이터를 통해 제공될 서비스들의 인터페이스(`ISaveLoadManager`, `IRewardManager`, `IScoreManager`)를 정의.
- **위치**: `Assets/1. Scripts/Core/Interfaces/`
- **네임스페이스**: `DungeonMaster.Core.Interfaces`

---
## 3. Data (DungeonMaster.Data)
*게임에 사용되는 모든 데이터 구조와 ScriptableObject 기반 클래스를 정의합니다.*

### `Data.PlayerData`
- **역할**: 플레이어의 영구 데이터를 정의하는 최상위 클래스. 저장/로드의 대상.
- **위치**: `Assets/1. Scripts/Data/PlayerData.cs`
- **네임스페이스**: `DungeonMaster.Data`

### `Data.*Data.cs` (예: `RewardTableData.cs`, `WaveDataData.cs`, `BuffData.cs`)
- **역할**: 게임의 각종 시스템에서 사용하는 데이터의 원형을 정의하는 `ScriptableObject` 기반 클래스들.
- **위치**: `Assets/1. Scripts/Data/` 또는 `Assets/1. Scripts/Gameplay/Combat/` 등
- **네임스페이스**: `DungeonMaster.Data` 또는 `DungeonMaster.Gameplay.Combat` 등

### `Data.Enums.*`
- **역할**: 게임 전반에서 사용되는 모든 열거형(`StatType`, `CardGrade` 등)을 정의.
- **위치**: `Assets/1. Scripts/Data/Enums/`
- **네임스페이스**: `DungeonMaster.Data.Enums`

### `Data.Structs.*`
- **역할**: 여러 곳에서 사용되는 복합 데이터 구조체(`GrowthRateData`, `CriticalData` 등)를 정의.
- **위치**: `Assets/1. Scripts/Data/Structs/`
- **네임스페이스**: `DungeonMaster.Data.Structs`

---
## 4. Gameplay (DungeonMaster.Gameplay)
*인스턴스(게임 한 판) 내에서 발생하는 실제 게임 플레이 로직을 담당합니다.*

### `Gameplay.Actors.*`
- **역할**: 유닛(몬스터, 마왕)의 스탯, 이동, 스킬 사용 등 행위 주체와 관련된 모든 로직.
- **위치**: `Assets/1. Scripts/Gameplay/Actors/`
- **네임스페이스**: `DungeonMaster.Gameplay.Actors`
- **주요 클래스**: `CharacterStats`, `CharacterStat`, `DemonLordSkillManager`, `GridMovementController`, `EnemyInfo`

### `Gameplay.Combat.*`
- **역할**: 데미지 계산, 버프/디버프 적용 등 전투 규칙과 상호작용을 구현.
- **위치**: `Assets/1. Scripts/Gameplay/Combat/`
- **네임스페이스**: `DungeonMaster.Gameplay.Combat`
- **주요 클래스**: `BuffController`, `BuffData`

### `Gameplay.Dungeon.*`
- **역할**: 던전 그리드 생성, 룸 및 몬스터 배치, 웨이브 스폰 등 던전 환경 자체에 대한 로직.
- **위치**: `Assets/1. Scripts/Gameplay/Dungeon/`
- **네임스페이스**: `DungeonMaster.Gameplay.Dungeon`
- **주요 클래스**: `DungeonGrid`, `MonsterPlacementManager`, `EnemySpawner`

---
## 5. Systems (DungeonMaster.Systems)
*메타 게임 및 게임의 배경에서 동작하는 시스템들을 담당합니다.*

### `Systems.Progression.*`
- **역할**: 영구 성장(레벨업, 카드 강화)과 관련된 로직을 처리.
- **위치**: `Assets/1. Scripts/Systems/Progression/`
- **네임스페이스**: `DungeonMaster.Systems.Progression`
- **주요 클래스**: `LevelUpProcessor`, `GrowthRateManager`

### `Systems.Rewards.*`
- **역할**: 점수 계산 및 전투 종료 후 보상 지급 로직을 처리.
- **위치**: `Assets/1. Scripts/Systems/Rewards/`
- **네임스페이스**: `DungeonMaster.Systems.Rewards`
- **주요 클래스**: `ScoreManager`, `RewardManager`

---
*참고: `UI`, `Utilities`, 기타 `Systems` 하위 카테고리 스크립트들은 아직 생성되지 않았습니다.*
