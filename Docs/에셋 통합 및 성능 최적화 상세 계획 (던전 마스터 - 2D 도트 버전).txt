# **에셋 통합 및 성능 최적화 상세 계획 (던전 마스터 \- 2D 도트 버전)**

## **개요**

본 문서는 '던전 마스터' 프로젝트의 개발 후반 단계에서, 기능 구현이 완료된 프로토타입을 실제 출시 가능한 제품 수준으로 끌어올리기 위한 '에셋 통합' 및 '성능 최적화' 단계의 구체적인 실행 계획을 정의합니다. 이 단계의 목표는 **2D 도트 그래픽** 최종 에셋을 원활하게 적용하고, 모바일 플랫폼에서 부드러운 사용자 경험을 제공하기 위한 명확한 기준과 작업 절차를 수립하는 것입니다.

## **6.1. 전문적인 에셋 워크플로우: 플레이스홀더에서 최종 아트로**

그레이박스 프로토타입 단계에서 사용된 임시 에셋(플레이스홀더)을 최종 아트 에셋으로 효율적이고 비파괴적인 방식으로 교체하는 워크플로우를 수립합니다.

### **6.1.1. 에셋 교체 워크플로우**

1. **프리팹 구조 유지:** 모든 게임 오브젝트(몬스터, 마왕, 던전 방 등)는 로직을 담은 부모 GameObject와 시각적 표현을 담은 자식 GameObject로 구성하는 것을 원칙으로 합니다.  
   * **부모 오브젝트:** Collider2D, 각종 스크립트 컴포넌트(InGameUnit, DungeonRoomController 등)를 포함합니다.  
   * **자식 오브젝트:** SpriteRenderer 등 실제 스프라이트와 비주얼 에셋을 포함합니다.  
2. **교체 절차:**  
   * 아티스트가 최종 에셋(PNG 등)을 전달하면, 개발자는 기존 플레이스홀더 자식 오브젝트의 SpriteRenderer를 비활성화하거나 삭제합니다.  
   * 새로운 최종 아트 에셋을 로직이 담긴 부모 오브젝트의 자식으로 배치합니다.  
   * 이를 통해 스크립트와 컴포넌트의 연결을 다시 설정할 필요 없이 시각적 외형만 안전하게 교체할 수 있습니다.

### **6.1.2. 2D 에셋 제작 표준 (아티스트-개발자 간 협업 가이드)**

원활한 통합을 위해 모든 2D 에셋은 다음 표준을 준수해야 합니다.

* **PPU (Pixels Per Unit):** 프로젝트의 모든 스프라이트는 **동일한 PPU 값**을 사용해야 합니다. (예: 32px \= 1 유닛). 이는 도트 그래픽의 픽셀 밀도를 일정하게 유지하여 일관된 비주얼을 보장하는 핵심 설정입니다.  
* **피벗(Pivot):** 캐릭터 스프라이트의 피벗은 \*\*발밑 중앙(Bottom Center)\*\*에 위치시켜야 합니다. 이는 위치 계산 및 정렬의 기준점이 됩니다.  
* **필터 모드(Filter Mode):** 모든 도트 그래픽 텍스처는 임포트 설정에서 필터 모드를 \*\*Point (no filter)\*\*로 설정하여 픽셀이 뭉개지거나 흐려지는 현상을 방지해야 합니다.  
* **명명 규칙:** 모든 에셋 파일명은 \[AssetType\]\_\[AssetName\]\_\[Variant\] 형식(예: Sprite\_Goblin\_Archer, Icon\_Skill\_Fireball)을 따릅니다.

## **6.2. 에셋 최적화 심층 분석**

모바일 환경에서의 빌드 크기, 메모리 사용량, 로딩 시간을 최소화하기 위해 모든 에셋 유형에 대한 구체적인 최적화 기준을 적용합니다.

### **6.2.1. 텍스처 및 스프라이트 (Textures & Sprites)**

| 항목 | 기준 | 세부 내용 및 설정 |
| :---- | :---- | :---- |
| **압축** | **ASTC** | **Android/iOS 공통으로 ASTC 압축 포맷을 사용합니다.** 텍스처 임포터의 플랫폼별 오버라이드(Override for...) 설정을 통해 ASTC 6x6 block을 기본으로 설정합니다. |
| **해상도** | **최대 1024px** | \- **캐릭터/몬스터:** 최대 512x512 \<br\> \- **배경/타일:** 최대 1024x1024 \<br\> \- **UI 아이콘:** 최대 128x128 \<br\> \- **이펙트(VFX):** 최대 256x256 \<br\> 모든 텍스처 해상도는 **2의 거듭제곱**을 권장합니다. |
| **밉맵** | **전체 비활성화** | 2D 도트 게임에서는 카메라 줌 인/아웃에 따른 품질 저하 및 블러 현상을 막기 위해 모든 스프라이트의 밉맵(Generate Mip Maps)을 **비활성화**합니다. |
| **스프라이트 아틀라스** | **필수 사용** | 모든 인게임 스프라이트(캐릭터, 이펙트, 타일 등)는 \*\*스프라이트 아틀라스(Sprite Atlas)\*\*로 그룹화하여 **드로우 콜(Draw Call)을 최소화**하는 것을 최우선 목표로 합니다. |

### **6.2.2. 2D 애니메이션 최적화**

| 항목 | 기준 | 세부 내용 및 설정 |
| :---- | :---- | :---- |
| **키프레임** | **최소화** | 애니메이션 클립(Animation Clip)에서 불필요한 키프레임을 제거합니다. 특히 상태가 변하지 않는 구간의 중복 키프레임을 삭제하여 애니메이션 데이터 크기를 줄입니다. |
| **애니메이터** | **파라미터 최적화** | 애니메이터 컨트롤러(Animator Controller)에서 사용하는 파라미터의 수를 최소화하고, float나 int보다는 bool이나 trigger를 우선적으로 사용하여 연산 비용을 줄입니다. |

### **6.2.3. 오디오 (Audio)**

| 항목 | 기준 | 세부 내용 및 설정 |
| :---- | :---- | :---- |
| **압축 포맷** | **Vorbis / MP3** | \- **효과음(SFX):** Vorbis 포맷 사용, 퀄리티 50\~70% 수준으로 압축 \<br\> \- **배경음악(BGM):** MP3 포맷 사용 |
| **로드 타입** | **BGM은 스트리밍** | \- **짧은 효과음:** Decompress On Load 또는 Compressed In Memory \<br\> \- **긴 배경음악:** Streaming으로 설정하여 메모리 점유율을 최소화합니다. |

### **6.2.4. 고급 에셋 관리 (선택적 심화)**

* **Addressables 시스템 활용:** 대용량 에셋이나 추후 업데이트될 콘텐츠는 Addressables로 분리하여 관리합니다. 이는 앱 초기 설치 용량을 줄이고, 스토어 심사 없이 콘텐츠를 유연하게 업데이트하는 기반이 됩니다.  
* **다중 해상도 대응:** PC 등 고해상도 플랫폼 출시를 고려한다면, 해상도별(예: x1, x2) 스프라이트 세트를 준비하고 스크립트에서 해상도에 맞는 에셋을 로드하는 전략을 고려할 수 있습니다.

## **6.3. Unity 프로파일러를 이용한 선제적 성능 분석**

최적화는 추측이 아닌 측정에 기반해야 합니다. 개발 과정 전반에 걸쳐 프로파일러를 사용하여 병목 현상을 지속적으로 식별하고 해결합니다.

### **6.3.1. 프로파일링 절차**

1. **개발 빌드 프로파일링:** 반드시 \*\*개발 빌드(Development Build)\*\*를 생성하여 타겟 모바일 기기에 연결(Attach to Player)한 후 프로파일링을 진행합니다.  
2. **주요 구간 반복 테스트:** 몬스터가 대량으로 소환되는 후반 웨이브, 화려한 스킬 이펙트가 동시에 사용되는 전투 장면 등 부하가 많이 걸리는 특정 구간을 반복적으로 테스트하며 데이터를 수집합니다.  
3. **빌드 리포트 분석:** Unity Build Report와 같은 툴을 활용하여 빌드 후 에셋 크기, 미사용 에셋, 중복 리소스 등을 분석하고 빌드 용량을 최적화합니다.

### **6.3.2. 중점 분석 모듈 및 목표**

* **CPU Usage Module:**  
  * **목표:** 평균 프레임 타임 33.3ms 유지 (30 FPS 기준).  
  * **확인 사항:** 특정 프레임에서 발생하는 \*\*스파이크(Spike)\*\*를 찾아 원인이 되는 함수를 식별합니다. 특히 다수의 유닛 AI, 경로 탐색 로직 등을 중점적으로 확인합니다.  
* **Memory Module:**  
  * **목표:** 불필요한 **GC Alloc** 최소화.  
  * **확인 사항:** Update() 루프 내에서 발생하는 GC Alloc을 집중적으로 추적합니다. 오브젝트 풀링(Object Pooling)이 필요한 곳에 적용되었는지 확인합니다.  
* **Rendering Module & Overdraw:**  
  * **목표:** 드로우 콜(Batches) 최소화 및 오버드로우 감소.  
  * **확인 사항:** 씬(Scene) 뷰의 렌더링 모드를 \*\*오버드로우(Overdraw)\*\*로 설정하여 불필요하게 겹쳐 그려지는 영역이 있는지 시각적으로 확인합니다.

## **6.4. UI 및 렌더링 성능 고려사항 및 해결책**

UI Toolkit과 2D 렌더링 파이프라인에서 발생할 수 있는 성능 문제를 해결하기 위한 모범 사례입니다.

| 문제 상황 | 해결책 | '던전 마스터' 적용 예시 |
| :---- | :---- | :---- |
| **많은 UI 아이템 목록** | **ListView 컨트롤 사용** | \*\*'베이스 카드 도감', '장비/유물 인벤토리'\*\*와 같이 수백 개의 아이템이 표시될 수 있는 모든 UI는 반드시 ListView를 사용하여 \*\*UI 가상화(Virtualization)\*\*를 구현합니다. |
| **UI 상태 변화 애니메이션** | **transform, opacity 사용** | UI 요소에 애니메이션을 적용할 때, width, height 등 레이아웃 속성 대신 **transform 속성(translate, rotate, scale)과 opacity를 사용**하여 UI 지오메트리 재생성을 최소화합니다. |
| **과도한 드로우 콜** | **스프라이트 아틀라스 활용** | **동일한 텍스처(아틀라스)와 머티리얼을 사용하는 스프라이트들은 하나의 드로우 콜로 묶입니다.** 캐릭터, 배경, 이펙트 등 종류별로 아틀라스를 전략적으로 구성하여 배칭(Batching)을 극대화합니다. |
| **과도한 오버드로우** | **스프라이트 메시 타입 최적화** | 스프라이트 임포트 설정에서 **Mesh Type을 Tight로 설정**하여 스프라이트의 실제 모양에 맞게 메시를 생성합니다. 이는 투명한 영역의 렌더링을 줄여 오버드로우를 크게 개선합니다. |

## **6.5. 최종 점검 및 팀 워크플로우**

출시 전 최종 확인을 위한 체크리스트와 효율적인 협업을 위한 워크플로우를 정의합니다.

### **6.5.1. 최종 QA 체크리스트 (예시)**

* \[ \] 모든 스프라이트의 Filter Mode가 Point (no filter)로 설정되었는가?  
* \[ \] 모든 UI/인게임 스프라이트가 Sprite Atlas에 포함되었는가?  
* \[ \] 배경음악(BGM)의 Load Type이 Streaming으로 설정되었는가?  
* \[ \] 프로파일러 연결 테스트 시 주요 구간에서 심각한 CPU 스파이크나 GC Alloc이 발생하지 않는가?  
* \[ \] 주요 모바일 기기 해상도에서 UI 깨짐 현상이 없는가?

### **6.5.2. 트러블슈팅: 자주 발생하는 문제**

* **문제:** 스프라이트 아틀라스에 포함했는데도 드로우 콜이 줄지 않음.  
  * **해결:** SpriteRenderer의 Sorting Layer나 Order in Layer가 달라 배칭이 깨지는 경우가 많습니다. 동일한 레이어와 순서를 사용하도록 스크립트나 프리팹 설정을 확인합니다.  
* **문제:** 도트 그래픽이 특정 기기에서 흐릿하게 보임.  
  * **해결:** Filter Mode가 Bilinear로 잘못 설정되었거나, PPU가 일치하지 않아 발생하는 문제입니다. 모든 관련 에셋의 임포트 설정을 다시 한번 확인합니다.